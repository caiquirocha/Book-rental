TODO:
/* SAFARI BOOKS GIVES US ALL BOOKS WHICH CAN BE AVAILABLE IN LIBRARY. LIBRARY HAVE LIST OF AVAILABLE BOOKS (ONE OF SAFARI BOOK API WITH UNIQUE ID)
-add button to fetch list all books from SafariBook API (new entry on database something like BOOKS API - it will be used on add book functionality where
we replace current functionality with select input which show us all books from BOOKS API in database
-to pay for overdue - every borrow book action should put date with deadline for return book. Only admin can click that user return book. When admin
click it, ten should logic calculate if was there overdue, and if yes should add overdue on user account which can be removed only by admin.


THREE FUNCTIONALITIES BELOW WE DONT HAVE TO DO I THINK // Marcin.
-discuss payments in app // it is for 5 I think
-how many copy of given book is in the library (add,remove) // dont necessary I think.
-unique qr code per student // maybe it would be not necessary

//Admin (book.rental.p.lodz.pl / admin12345678)
DONE:
-Initially project configuration
-Initial Firebase configuration
-Login into application functionality
-Register in application functionality (
-send verification email functionality (here example: https://firebase.googleblog.com/2017/02/email-verification-in-firebase-auth.html)
-buy some new books request button
-check his account (how many books are borrowed already) - po co to?
-Borrowing and returning books functionality (which student, which book, from, to etc.) - to improve
-access to book library (checking which books are available, which aren't available)
-giving id for every book, every book has own qrcode
-reserve book (24h) / cancel reservation
-handling with destroyed books (its the same what remove books)


/*
Example data for testing: SafariBooks Downloader
https://github.com/nicohaenggi/SafariBooks-Downloader

Roles:
-student -> registering (email with suffix p.lodz.pl, confirme by click on link on email box), loging, access to book library, unique qr code, request for library buying the book
reserve the book (24h), check account of borrowed and reserved books, cancel reservation, pay for overdue, destroy
-admin -> how many copy of given book is in the library (add, remove), confirm borrowing and returnig books, 
General requirements:
giving id for every book, every book has qr code, discuss payments in app

  
we have to think about some errors like admin give student wrong book (the same title but with wrong id/qrcode).
*/